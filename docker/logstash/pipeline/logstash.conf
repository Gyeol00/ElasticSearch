input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/mysql-connector/mysql-connector-java-8.0.33.jar"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://mysql:3306/shop?useSSL=false&serverTimezone=Asia/Seoul"
    jdbc_user => "root"
    jdbc_password => "1234"
    schedule => "* * * * *"
    statement => "
      SELECT 
        id, 
        prod_name, 
        company, 
        rating_avg, 
        review_count, 
        prod_price, 
        sname_list, 
        link, 
        sales_count 
      FROM product
    "
  }
}

filter {
  if ![prod_name] or [prod_name] == "" or [prod_name] == "null" {
    drop { }
  }

  # <<< [수정] 이 부분을 추가하여 필드명을 변경합니다. >>>
  mutate {
    rename => { "prod_name" => "product_name" }
  }

  # 이벤트가 들어온 시간 기록
  ruby {
    code => "event.set('ingest_time', Time.now.to_f)"
  }

  # 처리 완료 시점에서 처리 시간 계산
  ruby {
    code => "
      start_time = event.get('ingest_time')
      if start_time
        duration = Time.now.to_f - start_time
        event.set('processing_time_seconds', duration)
      else
        event.set('processing_time_seconds', -1)
      end
    "
  }
}

output {
  elasticsearch {
    hosts           => ["http://elasticsearch:9200"]
    index           => "product_20240607_test"
    document_id     => "%{id}"
    action          => "update"
    doc_as_upsert   => true
  }
  stdout { codec => rubydebug }
# 추가로 로그 파일에 처리 시간 찍기 원하면 아래 주석 해제
  # file {
  #   path => "/usr/share/logstash/logs/processing_time.log"
  #   codec => line { format => "ID: %{id} 처리시간: %{processing_time_seconds}초" }
  # }
}